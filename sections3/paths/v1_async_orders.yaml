post:
  summary: Create an order asynchronously
  operationId: POST_CreateOrderAsynchronously
  description: >
    **Note:** This operation is only available if you have the
    [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders)
    feature enabled. Orders is now generally available as of Zuora Billing
    Release 284 (August 2020). If you are an existing Zuora Subscribe and Amend
    customer and want to adopt Orders, see [What is Orders
    Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization#What_is_Orders_Harmonization.3F)
    and join the [Orders Harmonization community
    group](https://community.zuora.com/t5/Orders-Harmonization/gp-p/Orders-Harmonization)
    for more information. If you want to enable Orders, submit a request at
    [Zuora Global Support](https://support.zuora.com/).


    **Note:** The [Order Line
    Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items)
    feature is now generally available to all Zuora customers. You need to
    enable the
    [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders)
    feature to access the [Order Line
    Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items)
    feature. As of Zuora Billing Release 313 (November 2021), new customers who
    onboard on
    [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders)
    will have the [Order Line
    Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items)
    feature enabled by default. If you are a new customer who onboard on [Orders
    Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization)
    and want to enable the [Order Line
    Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items)
    feature, submit a request at [Zuora Global
    Support](https://support.zuora.com/). If you are an existing
    [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders)
    or [Orders
    Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization)
    customer and want to enable the [Order Line
    Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items)
    feature, submit a request at [Zuora Global
    Support](https://support.zuora.com/).        


    In the case where a normal "Create an order" operation call will time out,
    use this operation instead to create an order asynchronously. A job will be
    creating the order in the back end; the job ID will be returned for tracking
    the job status and result. 


    The limit of orders allowed on a subscription is 1000.


    The limit of order line items allowed in an order is 100.


    Zuora has the following limits on the Orders synchronous API to prevent
    performance degradation: 

    * Up to 50 subscriptions are allowed in a single [Create an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_Order)
    or [Preview an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder)
    operation call.

    * Up to 50 order actions are allowed in a single [Create an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_Order)
    or [Preview an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder)
    operation call.

    * Up to 50 order actions are allowed on a single subscription in a [Create
    an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_Order)
    or [Preview an
    order](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder)
    operation call.


    If you have an Order that exceeds any limits of the above, Zuora recommends
    you use the following asynchronous API operations:

    * [Create an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_CreateOrderAsynchronously)

    * [Preview an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrderAsynchronously)


    Zuora has the following limits on the Orders asynchronous API operations to
    prevent performance degradation:

    * Up to 300 subscriptions are allowed in a single [Create an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_CreateOrderAsynchronously)
    or [Preview an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrderAsynchronously)
    operation call.

    * Up to 300 order actions are allowed in a single [Create an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_CreateOrderAsynchronously)
    or [Preview an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrderAsynchronously)
    operation call.

    * Up to 300 order actions are allowed on a single subscription in a [Create
    an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_CreateOrderAsynchronously)
    or [Preview an order
    asynchronously](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrderAsynchronously)
    operation call.


    If you have a need for a large order that exceeds any limits of the above,
    you can request a limit increase for the Orders asynchronous API by
    submitting a request at [Zuora Global Support](https://support.zuora.com).
  tags:
    - Orders
  parameters:
    - $ref: ../components/parameters/GLOBAL_HEADER_Zuora_Track_Id.yaml
    - $ref: ../components/parameters/GLOBAL_HEADER_Zuora_Entity_Ids_Single.yaml
    - in: query
      description: >
        Specify whether to return IDs for the [Get job status and
        response](https://www.zuora.com/developer/api-reference/#operation/GET_JobStatusAndResponse)
        operation. If you set this query parameter to `true`, the corresponding
        IDs, which are associated with the numbers returned in this operation,
        can be returned in the "Get job status and response" response body.
      name: returnIds
      required: false
      schema:
        type: boolean
        default: false
    - name: zuora-version
      in: header
      required: false
      description: |

        The minor version of the Zuora REST API. 

        You need to set this parameter if you want to use the following fields:
        * subscriptions
        * subscriptionNumbers
        * subscriptionIds (when the `returnId` query parameter is set to `true`)
      schema:
        type: string
  requestBody:
    content:
      application/json; charset=utf-8:
        schema:
          $ref: ../components/schemas/POSTOrderAsyncRequestType.yaml
    required: true
  responses:
    '202':
      description: Accepted
      headers:
        RateLimit-Limit:
          description: >
            The request limit quota for the time window closest to exhaustion.
            See [rate
            limits](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits#Rate_limits)
            for more information.
          schema:
            type: string
        RateLimit-Remaining:
          description: >
            The number of requests remaining in the time window closest to quota
            exhaustion. See [rate
            limits](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits#Rate_limits)
            for more information.
          schema:
            type: number
        RateLimit-Reset:
          description: >
            The number of seconds until the quota resets for the time window
            closest to quota exhaustion. See [rate
            limits](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Policies/Concurrent_Request_Limits#Rate_limits)
            for more information.
          schema:
            type: number
        Zuora-Request-Id:
          description: >
            The Zuora internal identifier of the API call. You cannot control
            the value of this header.
          schema:
            type: string
            minLength: 36
            maxLength: 36
        Zuora-Track-Id:
          description: >
            A custom identifier for tracing the API call. If you specified a
            tracing identifier in the request headers, Zuora returns the same
            tracing identifier. Otherwise, Zuora does not set this header.
          schema:
            type: string
            maxLength: 64
        Location:
          description: >-
            URL for accessing the job result, in the format of
            `/async-jobs/{jobId}`. For example,
            `/async-jobs/1bc24f315d7b48d3a20245bfe73bdceb`
          schema:
            type: string
      content:
        application/json; charset=utf-8:
          schema:
            type: object
            properties:
              jobId:
                type: string
                format: UUID
                description: >-
                  The ID of an asynchronous job that will be returned for
                  tracking the status and result of the job.
              success:
                type: boolean
                description: Indicates whether the operation call succeeded.
        application/json:
          examples:
            response:
              value:
                jobId: 1bc24f315d7b48d3a20245bfe73bdceb
                success: 'true'
  x-code-samples:
    - lang: Curl
      source:
        $ref: ../code_samples/Curl/v1_async_orders/postundefined
    - lang: PHP
      source:
        $ref: ../code_samples/PHP/v1_async_orders/postundefined
    - lang: Java
      source:
        $ref: ../code_samples/Java/v1_async_orders/postundefined
    - lang: Python
      source:
        $ref: ../code_samples/Python/v1_async_orders/postundefined
    - lang: Ruby
      source:
        $ref: ../code_samples/Ruby/v1_async_orders/postundefined
